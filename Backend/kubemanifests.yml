apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o kubemanifests.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: gateway
    name: gateway
  spec:
    ports:
    - name: "9000"
      port: 9000
      targetPort: 9000
    selector:
      io.kompose.service: gateway
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o kubemanifests.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: bikenest
    name: bikenest
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: bikenest
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o kubemanifests.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/bikenest-db: "true"
          io.kompose.network/services: "true"
          io.kompose.service: bikenest
      spec:
        containers:
        - env:
          - name: MYSQL_DBNAME
          - name: MYSQL_HOST
            value: bikenest-db
          - name: MYSQL_PASSWORD
          - name: MYSQL_PORT
            value: "3306"
          - name: MYSQL_USER
          image: backend_bikenest
          imagePullPolicy: IfNotPresent
          name: bikenest
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: bikenest-db
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/bikenest-db: "true"
    podSelector:
      matchLabels:
        io.kompose.network/bikenest-db: "true"
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: services
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/services: "true"
    podSelector:
      matchLabels:
        io.kompose.network/services: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o kubemanifests.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: bikenest-db
    name: bikenest-db
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: bikenest-db
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o kubemanifests.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/bikenest-db: "true"
          io.kompose.service: bikenest-db
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
          - name: MYSQL_PASSWORD
          - name: MYSQL_ROOT_PASSWORD
            value: test
          - name: MYSQL_USER
            value: bikenestservice
          image: mysql
          imagePullPolicy: ""
          name: bikenest-db
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: bikenest-db
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/bikenest-db: "true"
    podSelector:
      matchLabels:
        io.kompose.network/bikenest-db: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o kubemanifests.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: booking
    name: booking
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: booking
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o kubemanifests.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/booking-db: "true"
          io.kompose.network/services: "true"
          io.kompose.service: booking
      spec:
        containers:
        - env:
          - name: MYSQL_DBNAME
          - name: MYSQL_HOST
            value: booking-db
          - name: MYSQL_PASSWORD
          - name: MYSQL_PORT
            value: "3306"
          - name: MYSQL_USER
          image: backend_booking
          imagePullPolicy: IfNotPresent
          name: booking
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: booking-db
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/booking-db: "true"
    podSelector:
      matchLabels:
        io.kompose.network/booking-db: "true"
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: services
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/services: "true"
    podSelector:
      matchLabels:
        io.kompose.network/services: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o kubemanifests.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: booking-db
    name: booking-db
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: booking-db
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o kubemanifests.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/booking-db: "true"
          io.kompose.service: booking-db
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
          - name: MYSQL_PASSWORD
          - name: MYSQL_ROOT_PASSWORD
          - name: MYSQL_USER
          image: mysql
          imagePullPolicy: ""
          name: booking-db
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: booking-db
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/booking-db: "true"
    podSelector:
      matchLabels:
        io.kompose.network/booking-db: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o kubemanifests.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: gateway
    name: gateway
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: gateway
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o kubemanifests.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/services: "true"
          io.kompose.service: gateway
      spec:
        containers:
        - image: backend_gateway
          imagePullPolicy: IfNotPresent
          name: gateway
          ports:
          - containerPort: 9000
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: services
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/services: "true"
    podSelector:
      matchLabels:
        io.kompose.network/services: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o kubemanifests.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: payment
    name: payment
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: payment
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o kubemanifests.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/payment-db: "true"
          io.kompose.network/services: "true"
          io.kompose.service: payment
      spec:
        containers:
        - env:
          - name: BT_MERCHANT_ID
          - name: BT_PRIVATE_KEY
          - name: BT_PUBLIC_KEY
          - name: MYSQL_DBNAME
          - name: MYSQL_HOST
            value: payment-db
          - name: MYSQL_PASSWORD
          - name: MYSQL_PORT
            value: "3306"
          - name: MYSQL_USER
          image: backend_payment
          imagePullPolicy: IfNotPresent
          name: payment
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: services
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/services: "true"
    podSelector:
      matchLabels:
        io.kompose.network/services: "true"
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: payment-db
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/payment-db: "true"
    podSelector:
      matchLabels:
        io.kompose.network/payment-db: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o kubemanifests.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: payment-db
    name: payment-db
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: payment-db
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o kubemanifests.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/payment-db: "true"
          io.kompose.service: payment-db
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
          - name: MYSQL_PASSWORD
          - name: MYSQL_ROOT_PASSWORD
          - name: MYSQL_USER
          image: mysql
          imagePullPolicy: ""
          name: payment-db
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: payment-db
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/payment-db: "true"
    podSelector:
      matchLabels:
        io.kompose.network/payment-db: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o kubemanifests.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: user-db
    name: user-db
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: user-db
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o kubemanifests.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/user-db: "true"
          io.kompose.service: user-db
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
          - name: MYSQL_PASSWORD
          - name: MYSQL_ROOT_PASSWORD
          - name: MYSQL_USER
          image: mysql
          imagePullPolicy: ""
          name: user-db
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: user-db
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/user-db: "true"
    podSelector:
      matchLabels:
        io.kompose.network/user-db: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o kubemanifests.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: usermgmt
    name: usermgmt
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: usermgmt
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o kubemanifests.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/services: "true"
          io.kompose.network/user-db: "true"
          io.kompose.service: usermgmt
      spec:
        containers:
        - env:
          - name: MYSQL_DBNAME
          - name: MYSQL_HOST
            value: user-db
          - name: MYSQL_PASSWORD
          - name: MYSQL_PORT
            value: "3306"
          - name: MYSQL_USER
          image: backend_usermgmt
          imagePullPolicy: IfNotPresent
          name: usermgmt
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: user-db
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/user-db: "true"
    podSelector:
      matchLabels:
        io.kompose.network/user-db: "true"
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: services
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/services: "true"
    podSelector:
      matchLabels:
        io.kompose.network/services: "true"
kind: List
metadata: {}

