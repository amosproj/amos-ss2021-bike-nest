# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Backend Tests (Gradle)

on: [push]

jobs:
  Backend-Tests:

    runs-on: ubuntu-latest
    env:
      bikenest-service: ./Backend/service-bikenest
      booking-service: ./Backend/service-booking
      usermanagement-service: ./Backend/service-usermgmt
      payment-service: ./Backend/service-payment
      apigateway: ./Backend/apigateway
      MYSQL_HOST: localhost
      MYSQL_DBNAME: test
      MYSQL_USER: user
      MYSQL_PASSWORD: test
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        
    # For now use the node js script to wait on the docker containers
    - name: Setup Node.js environment
      uses: actions/setup-node@v1
      with:
        node-version: 15.x
    # Install the wait-on script, that can be used to wait until the docker containers are running.
    - name: Install wait-on script
      run: npm install -g wait-on
      

    # Start up all Database Docker Containers.
    - name: Start UserDB Container
      run: |
        docker run -d -p 3306:3306 \
          --env MYSQL_ROOT_PASSWORD=test \
          --env MYSQL_USER=user \
          --env MYSQL_PASSWORD=test \
          --env MYSQL_DATABASE=test \
          --name userdb mysql:latest
    - name: Start BookingDB Container
      run: |
        docker run -d -p 3307:3306 \
          --env MYSQL_ROOT_PASSWORD=test \
          --env MYSQL_USER=user \
          --env MYSQL_PASSWORD=test \
          --env MYSQL_DATABASE=test \
          --name bookingdb mysql:latest
    - name: Start PaymentDB Container
      run: |
        docker run -d -p 3308:3306 \
          --env MYSQL_ROOT_PASSWORD=test \
          --env MYSQL_USER=user \
          --env MYSQL_PASSWORD=test \
          --env MYSQL_DATABASE=test \
          --name paymentdb mysql:latest
    - name: Start BikenestDB Container
      run: |
        docker run -d -p 3309:3306 \
          --env MYSQL_ROOT_PASSWORD=test \
          --env MYSQL_USER=user \
          --env MYSQL_PASSWORD=test \
          --env MYSQL_DATABASE=test \
          --name bikenestdb mysql:latest
            
    
    # Execute all of the unit tests with correctly set environments so that the service can connect to the db
    # Also wait for the databases to be ready, before tests are executed
    - name: API Gateway Unit Tests
      working-directory: ${{env.apigateway}}
      run: ./gradlew test --tests com.bikenest.apigateway.unit.*
    - name: UserMGMT Service Unit Tests
      working-directory: ${{env.usermanagement-service}}
      run: ./gradlew test --tests com.bikenest.serviceusermgmt.unit.*
      env:
        MYSQL_PORT: 3306
    - name: Bikenest Service Unit Tests
      working-directory: ${{env.bikenest-service}}
      run: ./gradlew test --tests com.bikenest.servicebikenest.unit.*
      env:
        MYSQL_PORT: 3309
    - name: Booking Service Unit Tests
      working-directory: ${{env.booking-service}}
      run: ./gradlew test --tests com.bikenest.servicebooking.unit.*
      env:
        MYSQL_PORT: 3307
    - name: Payment Service Unit Tests
      working-directory: ${{env.payment-service}}
      run: ./gradlew test --tests com.bikenest.servicepayment.unit.*
      env:
        MYSQL_PORT: 3308
        
    # Execute all Integration tests
    - name: API Gateway Integration Tests
      working-directory: ${{env.apigateway}}
      run: ./gradlew test --tests com.bikenest.apigateway.integration.*
    - run: wait-on tcp:3306
    - name: UserMGMT Service Integration Tests
      working-directory: ${{env.usermanagement-service}}
      run: ./gradlew test --tests com.bikenest.serviceusermgmt.integration.*
      env:
        MYSQL_PORT: 3306
    - run: wait-on tcp:3309
    - name: Bikenest Service Integration Tests
      working-directory: ${{env.bikenest-service}}
      run: ./gradlew test --tests com.bikenest.servicebikenest.integration.*
      env:
        MYSQL_PORT: 3309
    - run: wait-on tcp:3307
    - name: Booking Service Integration Tests
      working-directory: ${{env.booking-service}}
      run: ./gradlew test --tests com.bikenest.servicebooking.integration.*
      env:
        MYSQL_PORT: 3307
    - run: wait-on tcp:3308
    - name: Payment Service Integration Tests
      working-directory: ${{env.payment-service}}
      run: ./gradlew test --tests com.bikenest.servicepayment.integration.*
      env:
        MYSQL_PORT: 3308
        BT_MERCHANT_ID: DUMMY
        BT_PUBLIC_KEY: DUMMY
        BT_PRIVATE_KEY: DUMMY
      
